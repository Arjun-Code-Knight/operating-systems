The read String being displayed as memory instructions as below. They are annotated with which instruction refers to which instruction in C.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ Machine Instructions $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

   0x00000000004007d5 <+0>:     push   %rbp ----- store base pointer on the stack for return
   0x00000000004007d6 <+1>:     mov    %rsp,%rbp ---now point rbp to rsp
   0x00000000004007d9 <+4>:     push   %rbx
   0x00000000004007da <+5>:     sub    $0x48,%rsp
   0x00000000004007de <+9>:     mov    %rdi,-0x38(%rbp)
   0x00000000004007e2 <+13>:    mov    %esi,-0x3c(%rbp)
   0x00000000004007e5 <+16>:    mov    %rdx,-0x48(%rbp)
   0x00000000004007e9 <+20>:    mov    %rsp,%rax
   0x00000000004007ec <+23>:    mov    %rax,%rbx
   0x00000000004007ef <+26>:    mov    -0x3c(%rbp),%eax
   0x00000000004007f2 <+29>:    add    $0x24,%eax
   0x00000000004007f5 <+32>:    movslq %eax,%rdx
   0x00000000004007f8 <+35>:    sub    $0x1,%rdx
   0x00000000004007fc <+39>:    mov    %rdx,-0x28(%rbp)
   0x0000000000400800 <+43>:    cltq
   0x0000000000400802 <+45>:    add    $0xf,%rax
   0x0000000000400806 <+49>:    add    $0xf,%rax
   0x000000000040080a <+53>:    shr    $0x4,%rax
   0x000000000040080e <+57>:    shl    $0x4,%rax
   0x0000000000400812 <+61>:    sub    %rax,%rsp
   0x0000000000400815 <+64>:    mov    %rsp,%rax
   0x0000000000400818 <+67>:    add    $0xf,%rax
   0x000000000040081c <+71>:    shr    $0x4,%rax
   0x0000000000400820 <+75>:    shl    $0x4,%rax
   0x0000000000400824 <+79>:    mov    %rax,-0x20(%rbp)
   0x0000000000400828 <+83>:    movl   $0x0,-0x18(%rbp) --------- initialize i to 0
   0x000000000040082f <+90>:    lea    -0x48(%rbp),%rax
   0x0000000000400833 <+94>:    mov    %rax,%rdi
   0x0000000000400836 <+97>:    callq  0x4007ca <dummy> ------------------ Call to dummy function
   0x000000000040083b <+102>:   mov    0x20067e(%rip),%rax        # 0x600ec0 <stdin@@GLIBC_2.2.5> 
   0x0000000000400842 <+109>:   mov    %rax,%rdi
   0x0000000000400845 <+112>:   callq  0x400660 <fgetc@plt> --------------------------- get character into C
   0x000000000040084a <+117>:   mov    %eax,-0x14(%rbp) -------------------------------- mov 
   0x000000000040084d <+120>:   cmpl   $0xffffffffffffffff,-0x14(%rbp) --------------- Compare C with EOF
   0x0000000000400851 <+124>:   je     0x400870 <readString+155>       ---------------- IF true break the for loop
   0x0000000000400853 <+126>:   cmpl   $0xa,-0x14(%rbp)      -------------------------- Compare  with \n(carriage return)
   0x0000000000400857 <+130>:   je     0x400870 <readString+155> ----------------------- If true above break for loop
   0x0000000000400859 <+132>:   mov    -0x18(%rbp),%eax  -------------------------------Move Move 'i' to eax
   0x000000000040085c <+135>:   mov    -0x14(%rbp),%edx ------------------------------- Move 'Char c' to edx
   0x000000000040085f <+138>:   mov    %edx,%ecx
   0x0000000000400861 <+140>:   mov    -0x20(%rbp),%rdx  ------------------------------- Move 'c' to buff
   0x0000000000400865 <+144>:   cltq
   0x0000000000400867 <+146>:   mov    %cl,(%rdx,%rax,1)
   0x000000000040086a <+149>:   addl   $0x1,-0x18(%rbp)  ------------------------------ Add +1 to b 'i'
   0x000000000040086e <+153>:   jmp    0x40083b <readString+102> ------------------------ For loop continues
   0x0000000000400870 <+155>:   mov    -0x18(%rbp),%eax
   0x0000000000400873 <+158>:   mov    -0x20(%rbp),%rdx
   0x0000000000400877 <+162>:   cltq
   0x0000000000400879 <+164>:   movb   $0x0,(%rdx,%rax,1) ---- buff[i] = 0;
   0x000000000040087d <+168>:   movl   $0x0,-0x18(%rbp) ---------------- initialize i to 0
   0x0000000000400884 <+175>:   jmp    0x4008a3 <readString+206> ---- go to compare with Buffsize
   0x0000000000400886 <+177>:   mov    -0x18(%rbp),%eax
   0x0000000000400889 <+180>:   cltq
   0x000000000040088b <+182>:   add    -0x38(%rbp),%rax --- point to s
   0x000000000040088f <+186>:   mov    -0x18(%rbp),%edx --- i
   0x0000000000400892 <+189>:   mov    -0x20(%rbp),%rcx --- move values to rcx of buff
   0x0000000000400896 <+193>:   movslq %edx,%rdx  
   0x0000000000400899 <+196>:   movzbl (%rcx,%rdx,1),%edx ---- get value of buff[i]
   0x000000000040089d <+200>:   mov    %dl,(%rax) ---- move value of buff[i] into s[i]
   0x000000000040089f <+202>:   addl   $0x1,-0x18(%rbp) ----- perform i++
   0x00000000004008a3 <+206>:   cmpl   $0x23,-0x18(%rbp) - ----------perform compare with Buffsize
   0x00000000004008a7 <+210>:   jle    0x400886 <readString+177>  ---- if true, continue for loop
   0x00000000004008a9 <+212>:   mov    -0x48(%rbp),%rdx
   0x00000000004008ad <+216>:   mov    -0x38(%rbp),%rax
   0x00000000004008b1 <+220>:   mov    %rax,%rdi
   0x00000000004008b4 <+223>:   mov    $0x0,%eax
   0x00000000004008b9 <+228>:   callq  *%rdx -- call to checkName
   0x00000000004008bb <+230>:   mov    %rbx,%rsp
   0x00000000004008be <+233>:   mov    -0x8(%rbp),%rbx
   0x00000000004008c2 <+237>:   leaveq
   0x00000000004008c3 <+238>:   retq




###########################################DATA SECTION#################################

#################################<-- Lower Address
#				#<-- f=0x400784 <checkName>
#				#
#	CODE/TEXT 		#<-- CODE SECTION
#				#
#################################
#				#
#				#<-- $1 = 0x600eb4 "F" (GRADE IS STORED HERE)
#	DATA			#<-- DATA SECTION
#				#
#################################
#				#
#				#<-- $2 = (char (*)[36]) 0x600ee0(NAME IS STORED HERE)
#				#
#	BSS SECTION		#<-- BSS SECTION
#				#
#################################
#				#
#				#
#				#
#	HEAP			#<-- HEAP SECTION
#				#
#				#
#################################
#	    |			#
#	    |(Heap grows down)	#
#	    V			#
#				#
#				#
#	    ^	 		#
#	    |(Stack grows up)	#
#	    |			#
#################################
#				#<-- (char (*)[variable]) 0x7fffffffdf00 ( address of buf[0])
#				#<-- (char (*)[variable]) 0x7fffffffdf23 ( address of buf[35])
#				#
#	STACK SECTION		#<-- Address of function pointer to f() -- stored at 0x7fffffffdf48
#				#<-- (int *) 0x7fffffffdf54(address of r)
#				#
#				#<-- (int *) 0x7fffffffdf78 ( address of i)
#				#<-- (int *) 0x7fffffffdf7c (address of C)
#				#
#################################<-- rbp at 0x7fffffffdf90(points to stack base)
#				#
#				#
#				#
#################################<-- HIGHER ADDRESS


STACK FRAME BELOW : Most of the writes go to the stack memory. variables C,i and r have a memory location on stack.

Stack level 0, frame at 0x7fffffffdfa0:
rip = 0x40089f in readString (hello.c:53); saved rip 0x400951
called by frame at 0x7fffffffdfd0
source language c.
Arglist at 0x7fffffffdf90, args: s=0x600ee0 "F", r=0, f=0x400784 <checkName>
Locals at 0x7fffffffdf90, Previous frame's sp is 0x7fffffffdfa0
Saved registers:
rbx at 0x7fffffffdf88, rbp at 0x7fffffffdf90, rip at 0x7fffffffdf98

############################################################################################################################


